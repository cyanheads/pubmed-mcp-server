# pubmed-mcp-server: Developer Guide & Architectural Standards

**Effective Date:** 2025-06-15

This document mandates the development practices, architectural patterns, and operational procedures for the `pubmed-mcp-server`. It is the authoritative guide for ensuring code quality, consistency, and maintainability. All development must adhere to these standards.

## I. Core Architectural Principles

Our architecture is built on a clear separation of concerns, ensuring that code is modular, testable, and easy to understand.

### 1. Logic Throws, Handlers Catch

This is the cornerstone of our error-handling strategy.

- **Core Logic (`logic.ts`)**: This layer is responsible for business logic only. It should be pure and self-contained. If an error occurs (e.g., failed validation, API error), it **must `throw` a structured `McpError`**. Logic files **must not** contain `try...catch` blocks for formatting final responses.
- **Handlers (`registration.ts`, Transports)**: This layer is responsible for invoking core logic and managing communication protocols. It **must** wrap all calls to the logic layer in a `try...catch` block. This is the only place where errors are caught, processed by the `ErrorHandler`, and formatted into a final `CallToolResult` or HTTP response.

### 2. Structured, Traceable Operations

Every operation must be traceable from start to finish through structured logging and context propagation.

- **`RequestContext`**: Every significant operation must begin by creating a `RequestContext` using `requestContextService.createRequestContext()`. This context, containing a unique `requestId`, must be passed down through all subsequent function calls.
- **`Logger`**: All logging must be done through the centralized `logger` singleton, and every log call must include the current `RequestContext`.

## II. Tool Development Workflow

This section defines the mandatory workflow for creating and modifying tools.

### A. File and Directory Structure

Each tool must reside in its own directory within `src/mcp-server/tools/` and follow this structure:

- **`toolName/`**
  - **`index.ts`**: A barrel file that exports only the `register...` function from `registration.ts`.
  - **`logic.ts`**: Contains the core business logic. It **must** define and export the tool's Zod input schema, all inferred TypeScript types (input and output), and the main logic function.
  - **`registration.ts`**: Registers the tool with the MCP server. It imports from `logic.ts` and implements the "Handler" role described in our core principles.
  - **`logic/` (Optional Subdirectory)**: For complex tools, the logic can be further broken down into smaller files within this directory, which are then orchestrated by the main `logic.ts`.

### B. The Authoritative Pattern: `fetchPubMedContent`

The refactored `fetchPubMedContent` tool serves as the canonical example for all tool development.

**Step 1: Define Schema and Logic (`logic.ts`)**

The `logic.ts` file defines the "what" and "how" of the tool. It is self-contained and throws errors when it cannot fulfill its contract.

```typescript
// In: src/mcp-server/tools/fetchPubMedContent/logic.ts

import { z } from "zod";
import { McpError, BaseErrorCode } from "../../../types-global/errors.js";
// ... other imports

// 1. Define and export the Zod schema
export const FetchPubMedContentInputSchema = z.object({
  // ... schema definition with .describe() for every field
});

// 2. Define and export TypeScript types
export type FetchPubMedContentInput = z.infer<
  typeof FetchPubMedContentInputSchema
>;
export type FetchPubMedContentOutput = {
  /* ... */
};

// 3. Implement and export the core logic
export async function fetchPubMedContentLogic(
  input: FetchPubMedContentInput,
  parentRequestContext: RequestContext
): Promise<FetchPubMedContentOutput> {
  const toolLogicContext = requestContextService.createRequestContext({
    /* ... */
  });
  logger.info("Executing tool", toolLogicContext);

  // Perform validation and business logic
  const validationResult = FetchPubMedContentInputSchema.safeParse(input);
  if (!validationResult.success) {
    // On failure, THROW a structured error
    throw new McpError(
      BaseErrorCode.VALIDATION_ERROR,
      "Input validation failed",
      { ...toolLogicContext, details: validationResult.error.flatten() }
    );
  }

  // ... perform work ...

  // On success, RETURN a structured output object
  return {
    /* ... success data ... */
  };
}
```

**Step 2: Register the Tool and Handle Errors (`registration.ts`)**

The `registration.ts` file wires the logic into the MCP server and handles all outcomes.

```typescript
// In: src/mcp-server/tools/fetchPubMedContent/registration.ts

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import {
  ErrorHandler,
  logger,
  requestContextService,
} from "../../../utils/index.js";
// 1. Import everything from the logic file
import {
  FetchPubMedContentInput,
  FetchPubMedContentInputSchema,
  fetchPubMedContentLogic,
} from "./logic.js";

export async function registerFetchPubMedContentTool(
  server: McpServer
): Promise<void> {
  const toolName = "fetch_pubmed_content";
  const toolDescription = "/* ... */";
  // ...

  server.tool(
    toolName,
    toolDescription,
    FetchPubMedContentInputSchema._def.schema.shape, // Access shape correctly for refined schemas
    async (
      input: FetchPubMedContentInput,
      mcpContext: any
    ): Promise<CallToolResult> => {
      const richContext = requestContextService.createRequestContext({
        /* ... */
      });

      try {
        // 2. Invoke the core logic
        const result = await fetchPubMedContentLogic(input, richContext);

        // 3. Format the SUCCESS response
        return {
          content: [{ type: "text", text: JSON.stringify(result) }],
          isError: false,
        };
      } catch (error) {
        // 4. CATCH any error thrown by the logic
        const handledError = ErrorHandler.handleError(error, {
          operation: "fetchPubMedContentToolHandler",
          context: richContext,
          input,
          rethrow: false,
        });

        // 5. Format the ERROR response
        const mcpError =
          handledError instanceof McpError
            ? handledError
            : new McpError(/* ... */);
        return {
          content: [
            {
              type: "text",
              text: JSON.stringify({
                error: {
                  code: mcpError.code,
                  message: mcpError.message,
                  details: mcpError.details,
                },
              }),
            },
          ],
          isError: true,
        };
      }
    }
  );
}
```

## III. Code Quality and Documentation

- **JSDoc**: Every file must start with a `@fileoverview` and `@module` block. All exported functions and types must have clear, concise JSDoc comments explaining their purpose.
- **Clarity Over Brevity**: Write self-documenting code with meaningful variable and function names.
- **Immutability**: Prefer functional approaches and immutable data structures where possible to avoid side effects.
- **Formatting**: All code must be formatted using Prettier (`npm run format`) before committing.

## IV. Security Mandates

- **Input Sanitization**: All inputs from external sources (tool arguments, API responses) must be treated as untrusted. Use the `sanitization` utilities where appropriate.
- **Secrets Management**: All secrets (API keys, auth keys) **must** be loaded from environment variables via the `config` module. Never hardcode secrets.
- **Rate Limiting**: Respect the rate limits of external services like NCBI. Use the centralized `rateLimiter` and `ncbiRequestQueueManager`.

This guide is the single source of truth for development standards. All code reviews will be conducted against these principles.
